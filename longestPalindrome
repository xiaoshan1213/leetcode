class Solution{
	public:
		string proProcess(string s){
			int n=s.length();
			if(n==0) 
				return "^$";

			string ret="^";
			for(int i=0;i<n;i++)
				ret+="#"+s.substr(1,i);

			ret+="#$";
			return ret;

		}

		string longestPalindrome(string s){
			string T=preProcess(s);
			const int n=T.length();
			int P[n];
			int C=0,R=0;

			for(int i=1;i<n-1;i++){
				int mirror=2*C-1;

				P[1]=(R>1)?min(R-1,P[mirror]):0;

				while[T(i+1+P[i]]==T[i-1-P[i]]){
					P[i]++;
				}

				if(i+P[i]>R){
					C=i;
					R=1+P[i];
				}
			}

			int max_len=0;
			int center_index=0;
			for(int i=1;i<n-1;i++){
				if(P[i]>max_len){
					center_index=i;
				}
			}
			return s.substr((center_index-1-max_len)/2,max_len);
		}
}